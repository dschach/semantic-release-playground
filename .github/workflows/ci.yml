# Unique name for this workflow
name: On Push

# Definition when the workflow should run
on:
  workflow_dispatch:
  push:
    # paths-ignore:
    #   - 'sfdx-project.json'
    #   - 'README.md'
    #   - 'docs/**'
    #   - 'doc-assets/**'
    #   - '.vscode/**'
    #   - '.github/**'
    paths:
      - 'force-app/**'
      - 'pmd/**'
      - 'config/**'

# Jobs to be executed
jobs:
  format-lint:
    runs-on: ubuntu-latest
    steps:
      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v3

      # Cache node_modules to speed up the process
      - name: 'Restore node_modules cache'
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: node_modules
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ env.cache-name }}-
            npm-
      # Install npm dependencies for Prettier and Jest
      - name: 'Install npm dependencies'
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm ci

      # Prettier formatting
      - name: 'Code formatting verification with Prettier'
        run: npm run prettier:verify:apex

  pmd-analysis:
    runs-on: ubuntu-latest
    needs: format-lint
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v3

      # Install PMD
      - name: 'Install PMD'
        run: |
          PMD_VERSION=$(curl -s https://api.github.com/repos/pmd/pmd/releases/latest | grep '.tag_name' | sed 's:.*/::' | sed 's:",::')
          wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F$PMD_VERSION/pmd-bin-$PMD_VERSION.zip
          unzip pmd-bin-$PMD_VERSION.zip -d ~
          mv ~/pmd-bin-$PMD_VERSION ~/pmd
          ~/pmd/bin/run.sh pmd --version

      # Run PMD scan
      - name: 'Run PMD scan'
        run: ~/pmd/bin/run.sh pmd -d force-app -R pmd/deployRules.xml -f text --cache .pmdCache -min 2

  pmd-analysis-action:
    runs-on: ubuntu-latest
    needs: format-lint
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v3

      # Install PMD
      #- name: 'Run PMD'
      #run: |
      #  PMD_VERSION=`cat pmd/pmd-version.txt`
      #  echo $PMD_VERSION
      #  wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F$PMD_VERSION/pmd-bin-$PMD_VERSION.zip
      #  unzip pmd-bin-$PMD_VERSION.zip -d ~
      #  mv ~/pmd-bin-$PMD_VERSION ~/pmd
      #  ~/pmd/bin/run.sh pmd --version

      # Run PMD scan
      #- name: 'Run PMD scan'
      #run: ~/pmd/bin/run.sh pmd -d force-app -R pmd/deployRules.xml -f text --cache .pmdCache --minimum-priority 1
      #- uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - uses: pmd/pmd-github-action@v1
        id: pmd
        with:
          rulesets: 'pmd/deployRules.xml'
          analyzeModifiedFilesOnly: false
          version: 'latest'
          createGitHubAnnotations: false
          sourcePath: 'force-app'

      # Check for PMD violations
      - name: 'Check for PMD violations'
        if: steps.pmd.outputs.violations != 0
        run: exit 1
