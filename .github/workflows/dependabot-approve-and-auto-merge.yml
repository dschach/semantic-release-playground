name: Dependabot Pull Request Approve and Merge
on: pull_request #_target
permissions:
  pull-requests: write
  contents: write
jobs:
  # Auto merge Dependabot PRs for:
  # - patch updates on prod dependencies
  # - minor updates on dev dependencies
  dependabot-auto-merge:
    # Only run for Dependabot PRs
    #if: ${{ github.actor == 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Fetch Dependabot metadata'
        id: dependabot
        uses: dependabot/fetch-metadata@v1

      - name: 'Check auto merge conditions'
        id: auto-merge
        if: |
          (
            steps.dependabot.outputs.update-type == 'version-update:semver-patch' &&
            contains('direct:production,indirect:production', steps.dependabot.outputs.dependency-type)
          ) || (
            contains('version-update:semver-minor,version-update:semver-patch', steps.dependabot.outputs.update-type) &&
            contains('direct:development,indirect:development', steps.dependabot.outputs.dependency-type)
          )
        run: echo "::notice ::auto-merge conditions satisfied"

      - name: 'Split title'
        id: split-title
        env:
          TITLE: ${{ github.event.pull_request.title }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{github.event.pull_request.html_url}}
        if: ${{ ! contains(github.event.pull_request.title, '):' ) && contains(github.event.pull_request.title, ':') }}
        run: |
          echo $TITLE  
          title_pt2="${TITLE##*:}"
          title_pt1="${TITLE%%:*}"
          gh pr checkout "$PR_URL" # sets the upstream metadata for `gh pr status`
          packagename="${{ steps.dependabot.outputs.dependency-names }}"
          echo "packagename is $packagename"
          echo "$title_pt1"
          echo "$title_pt2"
          parensOpen="("
          parensClose="):"
          pr_title=$title_pt1$parensOpen$packagename$parensClose$title_pt2
          echo "FINAL TITLE: $pr_title"
          gh pr edit "$PR_URL" --title "$pr_title"

      - name: 'Approve and merge PR'
        if: ${{ steps.auto-merge.conclusion == 'success' }}
        run: |
          gh pr review --approve "$PR_URL"
          gh pr merge --auto --squash "$PR_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.pull_request.html_url }}
